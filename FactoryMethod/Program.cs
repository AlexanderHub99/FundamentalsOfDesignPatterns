using FactoryMethod;

Console.WriteLine("Hello, World!");
// Фабричный метод (Factory Method) - это паттерн, который определяет интерфейс для создания объектов некоторого класса,
// но непосредственное решение о том, объект какого класса создавать происходит в подклассах. То есть паттерн предполагает,
// что базовый класс делегирует создание объектов классам-наследникам.

// Когда надо применять паттерн:

// --Когда заранее неизвестно, объекты каких типов необходимо создавать
// --Когда система должна быть независимой от процесса создания новых объектов и расширяемой: в нее можно легко вводить новые
//   классы, объекты которых система должна создавать.
// --Когда создание новых объектов необходимо делегировать из базового класса классам наследникам
Developer dev = new PanelDeveloper("ООО КирпичСтрой");
House house2 = dev.Create();

dev = new WoodDeveloper("Частный застройщик");
House house = dev.Create();

Console.ReadLine();

// В качестве абстрактного класса Product здесь выступает класс House. Его две конкретные реализации - PanelHouse и WoodHouse
// представляют типы домов, которые будут строить подрядчики. В качестве абстрактного класса создателя выступает Developer,
// определяющий абстрактный метод Create(). Этот метод реализуется в классах-наследниках WoodDeveloper и PanelDeveloper.
// И если в будущем нам потребуется построить дома какого-то другого типа, например, кирпичные, то мы можем с легкостью создать
// новый класс кирпичных домов, унаследованный от House, и определить класс соответствующего подрядчика. Таким образом, система
// получится легко расширяемой. Правда, недостатки паттерна тоже очевидны - для каждого нового продукта необходимо создавать
// свой класс создателя.